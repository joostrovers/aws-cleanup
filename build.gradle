def requiredVersionNodeJS = "10.16.3"

allprojects {
    ext {
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            nodeExecutable = Arrays.asList("node")
            ngExecutable = Arrays.asList("cmd", "/c", "ng")
            npmExecutable = Arrays.asList("cmd", "/c", "npm")
            terraformExecutable = Arrays.asList("cmd", "/c", "terraform")
            tscExecutable = Arrays.asList("cmd", "/c", "tsc")
        } else {
            nodeExecutable = Arrays.asList("node")
            ngExecutable = Arrays.asList("ng")
            npmExecutable = Arrays.asList("npm")
            terraformExecutable = Arrays.asList("terraform")
            tscExecutable = Arrays.asList("tsc")
        }
    }
}

def getVersionNodeJS = { ->
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    try {
        exec {
            commandLine nodeExecutable
            args "--version"
            standardOutput stdout
            errorOutput stderr
        }
    } catch (Exception ignored) {
    }

    return stdout.toString().trim().replace("v", "")
}

task verifyNodeJS {
    inputs.property("VERSION_NODE_JS", requiredVersionNodeJS)
    outputs.upToDateWhen { getVersionNodeJS() == requiredVersionNodeJS }
    doLast {
        if (getVersionNodeJS() != requiredVersionNodeJS) {
            throw new Exception("Required Node version " + requiredVersionNodeJS + " not installed")
        }
    }
}


subprojects {
    task npmInstall(type: Exec) {
        dependsOn verifyNodeJS
        enabled file("package.json").exists()
        inputs.file("package.json")
        outputs.file("package-lock.json")
        outputs.dir("node_modules")
        commandLine npmExecutable
        args "install"
    }

    task npmUpdate(type: Exec) {
        dependsOn verifyNodeJS
        enabled file("package.json").exists()
        inputs.file "package.json"
        inputs.property("todaysDate", new Date().clearTime())
        outputs.upToDateWhen { true }
        commandLine npmExecutable
        args "update"
    }

    task npmDedup(type: Exec) {
        dependsOn verifyNodeJS
        enabled file("package.json").exists()
        inputs.file("package.json")
        outputs.file("package-lock.json")
        outputs.dir("node_modules")
        commandLine npmExecutable
        args "dedup"
    }

    task clean(type: Delete) {
        delete "build"
        delete "dist"
        delete "node_modules"
    }
}


afterEvaluate {
    // avoiding simultaneous connections to npmjs.com
    def prevTask = null
    project.subprojects.each {
        def task = it.tasks.find { task -> task.name.contains('npmUpdate') }
        if (task != null) {
            if (prevTask != null) {
                task.mustRunAfter(prevTask)
            }
            prevTask = task
        }
    }

    prevTask = null
    project.subprojects.each {
        def task = it.tasks.find { task -> task.name.contains('npmInstall') }
        if (task != null) {
            if (prevTask != null) {
                task.mustRunAfter(prevTask)
            }
            prevTask = task
        }
    }
}
